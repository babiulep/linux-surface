diff -rupN a/drivers/input/touchscreen/surface3_spi.c b/drivers/input/touchscreen/surface3_spi.c
--- a/drivers/input/touchscreen/surface3_spi.c	2025-07-25 22:36:35.000000000 +0200
+++ b/drivers/input/touchscreen/surface3_spi.c	2025-07-26 17:47:59.172826599 +0200
@@ -25,6 +25,12 @@
 #define SURFACE3_REPORT_TOUCH	0xd2
 #define SURFACE3_REPORT_PEN	0x16
 
+bool use_dma = false;
+module_param(use_dma, bool, 0644);
+MODULE_PARM_DESC(use_dma,
+				"Disable DMA mode if you encounter touch input crash. "
+				"(default: false, disabled to avoid crash)");
+
 struct surface3_ts_data {
 	struct spi_device *spi;
 	struct gpio_desc *gpiod_rst[2];
@@ -317,6 +323,13 @@ static int surface3_spi_create_pen_input
 	return 0;
 }
 
+static bool surface3_spi_can_dma(struct spi_controller *ctlr,
+				struct spi_device *spi,
+				struct spi_transfer *tfr)
+{
+	return use_dma;
+}
+
 static int surface3_spi_probe(struct spi_device *spi)
 {
 	struct surface3_ts_data *data;
@@ -359,6 +372,19 @@ static int surface3_spi_probe(struct spi
 	if (error)
 		return error;
 
+	/*
+	 * Set up DMA
+	 *
+	 * TODO: Currently, touch input with DMA seems to be broken.
+	 * On 4.19 LTS, touch input will crash after suspend.
+	 * On recent stable kernel (at least after 5.1), touch input will crash after
+	 * the first touch. No problem with PIO on those kernels.
+	 * Maybe we need to configure DMA here.
+	 *
+	 * Link to issue: https://github.com/jakeday/linux-surface/issues/596
+	 */
+	spi->controller->can_dma = surface3_spi_can_dma;
+
 	return 0;
 }
 
diff -rupN a/drivers/platform/surface/surface3-wmi.c b/drivers/platform/surface/surface3-wmi.c
--- a/drivers/platform/surface/surface3-wmi.c	2025-07-25 22:36:35.000000000 +0200
+++ b/drivers/platform/surface/surface3-wmi.c	2025-07-26 17:47:59.454803481 +0200
@@ -37,6 +37,13 @@ static const struct dmi_system_id surfac
 			DMI_MATCH(DMI_PRODUCT_NAME, "Surface 3"),
 		},
 	},
+	{
+		.matches = {
+			DMI_MATCH(DMI_BIOS_VENDOR, "American Megatrends Inc."),
+			DMI_MATCH(DMI_SYS_VENDOR, "OEMB"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "OEMB"),
+		},
+	},
 #endif
 	{ }
 };
diff -rupN a/sound/soc/codecs/rt5645.c b/sound/soc/codecs/rt5645.c
--- a/sound/soc/codecs/rt5645.c	2025-07-25 22:36:35.000000000 +0200
+++ b/sound/soc/codecs/rt5645.c	2025-07-26 17:47:59.778776918 +0200
@@ -3793,6 +3793,15 @@ static const struct dmi_system_id dmi_pl
 		.driver_data = (void *)&intel_braswell_platform_data,
 	},
 	{
+		.ident = "Microsoft Surface 3",
+		.matches = {
+			DMI_MATCH(DMI_BIOS_VENDOR, "American Megatrends Inc."),
+			DMI_MATCH(DMI_SYS_VENDOR, "OEMB"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "OEMB"),
+		},
+		.driver_data = (void *)&intel_braswell_platform_data,
+	},
+	{
 		/*
 		 * Match for the GPDwin which unfortunately uses somewhat
 		 * generic dmi strings, which is why we test for 4 strings.
diff -rupN a/sound/soc/intel/common/soc-acpi-intel-cht-match.c b/sound/soc/intel/common/soc-acpi-intel-cht-match.c
--- a/sound/soc/intel/common/soc-acpi-intel-cht-match.c	2025-07-25 22:36:35.000000000 +0200
+++ b/sound/soc/intel/common/soc-acpi-intel-cht-match.c	2025-07-26 17:47:59.866769704 +0200
@@ -27,6 +27,14 @@ static const struct dmi_system_id cht_ta
 			DMI_MATCH(DMI_PRODUCT_NAME, "Surface 3"),
 		},
 	},
+	{
+		.callback = cht_surface_quirk_cb,
+		.matches = {
+			DMI_MATCH(DMI_BIOS_VENDOR, "American Megatrends Inc."),
+			DMI_MATCH(DMI_SYS_VENDOR, "OEMB"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "OEMB"),
+		},
+	},
 	{ }
 };
 
