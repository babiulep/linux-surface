# Maintainer: Maximilian Luz <m@mxnluz.io>
# Maintainer: Bla≈æ Hrastnik <blaz@mxxn.io>
# Maintainer: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>

pkgbase=linux-surface
pkgver=6.17.1.arch1
pkgrel=1
pkgdesc='Linux'
_shortver=${pkgver%.*}
_fullver=${pkgver%.*}-${pkgver##*.}
_srctag=v${_fullver}
url="https://github.com/archlinux/linux/commits/$_srctag"
arch=(x86_64)
license=(GPL2)
makedepends=(
  bc
  cpio
  gettext
  git
  libelf
  perl
  rust
  rust-bindgen
  rust-src
  tar
  xz
  python
  # we don't need `pahole` as deps because we disable `CONFIG_DEBUG_INFO`
  # ignoring deps for docs because we don't build docs package
)
optdepends=('iptsd: Touchscreen support'
            'linux-firmware: Firmware files for Linux'
            'linux-firmware-marvell: Firmware files for Marvell WiFi / Bluetooth')
options=(
  !debug
  !strip
)
_srcname=archlinux-linux
source=(
  "$_srcname::git+https://github.com/archlinux/linux#tag=$_srctag"
  config         # the main kernel config file

  surface.config # surface specific options
  arch.config # config changes for linux-surface kernel
  0001-secureboot.patch
  0002-surface3.patch
  0003-mwifiex.patch
  0004-ath10k.patch
  0005-ipts.patch
  0006-ithc.patch
  0007-surface-sam.patch
  0008-surface-sam-over-hid.patch
  0009-surface-button.patch
  0010-surface-typecover.patch
  0011-surface-shutdown.patch
  0012-surface-gpe.patch
  0013-cameras.patch
  0014-amd-gpio.patch
  0015-rtc.patch
)
validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
  'A2FF3A36AAA56654109064AB19802F8B0D70FC30'  # Jan Alexander Steffens (heftig)
)
sha256sums=('647162133ecdbf0b829c8291d41a325ce32df79ad93d89302106773a0cac3c87'
            '57786a01f3cfaeb696f79bf3b19996f7f787df3df8c6fbf6a9654aced518ec93'
            'ee110be98c41a45302b2b81b037e3c4392ea7f142282e28400ac67b37455d42a'
            '008e37de7e6cf8b9479ef0f0f425a25092646e85d741aedd056e5ff3e1096361'
            '04ad5ce818a39165235d387d428aeb12605be8c5b1e913a0c7a12c9c5edef1c2'
            '42f639c52f38defda3d5516859c1afc42aa3c162f8f8eb1cbae3677e2a41695f'
            '3640e5db83140bb62e2183c69cc00bc00fbf22a1d96479481a2b65486f381218'
            '83c63f25996736426892affda4f75f11dd5d176afa39ee7c52d19c109d9b6e97'
            '4f0833e207090cef3dc8af42c28e42f91138a5fbbd52b3a21dfcde435fe5d352'
            '7fda97124a4bbd20077617c9ebd27f550159a82de68c488c689efb19b7dd42ae'
            '2ce4ddf8715ba5c406ba1143b2082268b6b3ba297b694944c826765340783afe'
            '79a81118886c06aa35a9963ce39d97bf996cdfae2d35089ba3075c1e7fd2d9b3'
            '172a6b04b90885f0edd7609b287a534061c639a746c3b7eaf1994df81e7e9084'
            '43c82fbb7583be29d2e49447e7ee1860745d5cfe2af3fd1439aacbe4aee84522'
            '10756fbb38b21e4c886826c29b042028a42d42cc064178a53a8389b3945cadf9'
            '8ef4848edcfd3a284e9a69d297b303023dda27b8482cbd5d7f67a8e59082da1c'
            '4e893decdb56341e542bc4aed20c9507670e4a68b732cc638bd93ad2ef18b16b'
            'e46a3593f44b32eb8ef9295412e912716a676eb42d066a65d643ac6b3d6b7ce4'
            '5660ab754f3ce5ac0a0af746b93b573322f9e940a8ab6f0890aae2e38a86e181')


export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

# optional certificate and key for secure boot signing
_mok_crt="$PWD/MOK.crt"
_mok_key="$PWD/MOK.key"

_make() {
  test -s version
  make KERNELRELEASE="$(<version)" "$@"
}

prepare() {
  cd $_srcname

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname
  make defconfig
  make -s kernelrelease > version
  make mrproper

  # setup git
  git config --local user.email "surfacebot@users.noreply.github.com"
  git config --local user.name "surfacebot"

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    git am -3 "../$src"
  done

  echo "Setting config..."
  # cp ../config .config
  # merge the two configs together
  ./scripts/kconfig/merge_config.sh -m ../config ../surface.config ../arch.config
  _make olddefconfig

  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd $_srcname
  _make all
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(
    coreutils
    initramfs
    kmod
  )
  optdepends=(
    'linux-firmware: firmware images needed for some devices'
    'scx-scheds: to use sched-ext schedulers'
    'wireless-regdb: to set the correct wireless channels of your country'
  )
  provides=(
    linux=${_shortver}
    KSMBD-MODULE
    NTSYNC-MODULE
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
  )
  replaces=(
    virtualbox-guest-modules-arch
    wireguard-arch
  )

  cd $_srcname
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"
  local image_name="$(_make -s image_name)"

  # sign boot image if the prequisites are available
  if [[ -f "$_mok_crt" ]] && [[ -f "$_mok_key" ]] && [[ -x "$(command -v sbsign)" ]]; then
    echo "Signing boot image..."
    sbsign --key "$_mok_key" --cert "$_mok_crt" --output "$image_name" "$image_name"
  fi

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$image_name" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 _make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod

  # remove build link
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)
  provides=("linux-headers=${_shortver}")

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts
  ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Installing Rust files..."
  install -Dt "$builddir/rust" -m644 rust/*.rmeta
  install -Dt "$builddir/rust" rust/*.so

  echo "Installing unstripped VDSO..."
  make INSTALL_MOD_PATH="$pkgdir/usr" vdso_install \
    link=  # Suppress build-id symlinks

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
